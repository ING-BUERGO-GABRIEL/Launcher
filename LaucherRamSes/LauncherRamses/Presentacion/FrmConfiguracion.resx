<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>